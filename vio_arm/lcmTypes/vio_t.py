"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

from io import BytesIO
import struct

class vio_t(object):
    __slots__ = ["rot", "pos"]

    __typenames__ = ["float", "float"]

    __dimensions__ = [[3, 3], [3]]

    def __init__(self):
        self.rot = [ [ 0.0 for dim1 in range(3) ] for dim0 in range(3) ]
        self.pos = [ 0.0 for dim0 in range(3) ]

    def encode(self):
        buf = BytesIO()
        buf.write(vio_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        for i0 in range(3):
            buf.write(struct.pack('>3f', *self.rot[i0][:3]))
        buf.write(struct.pack('>3f', *self.pos[:3]))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != vio_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return vio_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = vio_t()
        self.rot = []
        for i0 in range(3):
            self.rot.append(struct.unpack('>3f', buf.read(12)))
        self.pos = struct.unpack('>3f', buf.read(12))
        return self
    _decode_one = staticmethod(_decode_one)

    def _get_hash_recursive(parents):
        if vio_t in parents: return 0
        tmphash = (0xea98c8d7c294c32f) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff) + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if vio_t._packed_fingerprint is None:
            vio_t._packed_fingerprint = struct.pack(">Q", vio_t._get_hash_recursive([]))
        return vio_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

    def get_hash(self):
        """Get the LCM hash of the struct"""
        return struct.unpack(">Q", vio_t._get_packed_fingerprint())[0]

